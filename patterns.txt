# Project Name:  SNAKE PEOPLE UML Editor
# File Name:     patterns.txt

Design Pattern: Iterators
    Location: File: UMLField line: 27
    Description: I used Python's built in for loop, which makes use of
                 iterators, to traverse a list of fields within the
                 class_dict
Design Pattern: Memento
    Location: File: UMLSavepoint line: 20-68
    Description: I created a wrapper object that saves the current state
                 of the model for the canvas, so that later
                 I can repopulate the canvas with the previous state.
Design Pattern: Facade
    Location: File: ViewChange line: 28-34
    Description: I created a function called bring_all_front which can be
                 called with a UMLSquare object so that everything within
                 the square is brought to the front of the canvas. This hides
                 all the calls necessary to bring each individual canvas element
                 within the square to the front.
Design Pattern: Facade
    Location: File: ViewChange line: 28-34
    Description: I created a function called bring_all_front which can be
                 called with a UMLSquare object so that everything within
                 the square is brought to the front of the canvas. This hides
                 all the calls necessary to bring each individual canvas element
                 within the square to the front.
Design Pattern: Observer
    Location: File: UMLBox line: 51
    Description: I create a list of all lines that would need to be updated.
                 Whenever a box is moved, an update is sent out to all
                 'subscribing' lines (lines that are connected to the box)
                 and they are told to update their position
Design Pattern: State
    Location: File: UMLField line: 15
    Description: I change the state of the fields textbox to disabled so that
                 now it gets displayed instead of being hidden
Design Pattern: State
    Location: File: UMLMethod line: 14
    Description: I change the state of the methods textbox to disabled so that
                 now it gets displayed instead of being hidden
Design Pattern: Mediator
    Location: File: UMLField line: 10-18
    Description: The update_fields function works as a mediator in that
                 whenever the gui tells the model to change fields, it 
                 signals one command (update_fields) to ensure that the gui
                 will be presenting all fields. This also does all the 
                 calculations for updating the size of the box
Design Pattern: Mediator
    Location: File: UMLMethod line: 10-18
    Description: The update_methods function works as a mediator in that
                 whenever the gui tells the model to change methods or prameters,
                 it signals one command (update_methods) to ensure that the gui
                 will be presenting all parameters and methods. This also does all the 
                 calculations for updating the size of the box
Design Pattern: Mediator
    Location: File: UMLBox line: 211
    Description: The class_adapter works as an inbetween piece that reads the
                 information within the class_dict and converts it to objects
                 usable to create a canvas element.
Design Pattern: Mediator
    Location: File: UMLLine line: 81
    Description: The line_adapter works to convert the relationship list to
                 usuable chunks of information that can display a line on the
                 canvas and relate it to the boxes
Design Pattern: MVC
    Location: Model: UMLClass, UMLRelationships
              View: UMLBox
              Controller: gui_main, Side_Panel, snake_uml
    Description: The model contains all the information for either classes
                 or relationships. This takes the form of class_dict and 
                 relationship_list. The view creates all necessary components
                 to display objects on the canvas. The view componants are
                 contained within the class_list. And the Controller works
                 either to listen for button clicks in the gui, or command
                 line input, depending on the startup mode. This is found throughout
                 all the controller files
Design Pattern: Bridge
    Location: UMLClass/UMLField/UMLMethod objects located in UMLclass/UMLAttributes
    Description: Each class is composed of lists of UMLFields and UMLMethods.
                 The UMLClass object refers to previously created UMLField
                 objects and UMLMethod objects.
Design Pattern: Adapter
    Location: ImageAdapter
    Description: The ImageAdapter is an object that sets up a canvas and window which
                 can then be called to adapt the data from the model into a format
                 used by the gui.
Design Pattern: Decorator
    Location: UMLLine
    Description: The UMLLine initializer creates two pseudo-objects that are tuples,
                 but it creates two in parrallel that can now easily tell how
                 the line is connected to the box, a reference to the line tkinter
                 object itself, and what the destination box is on the canvas. Its a
                 Decorator because it packs multiple bits of information on top of the
                 tkinter line object so that later it can be manipulated easily along
                 with the tkinter rectangle object it is connected to.